import { MongoClient, Db } from "mongodb";

interface MongoDBConfig {
  url: string;
  dbName: string;
  options: {
    maxPoolSize: number;
    serverSelectionTimeoutMS: number;
    socketTimeoutMS: number;
  };
}

// Configura√ß√£o para MongoDB Atlas
const defaultConfig: MongoDBConfig = {
  url: "mongodb+srv://deboragoncalves:xyhrqTlCZAwDPBGf@logico.jln2hwp.mongodb.net/",
  dbName: "logicoapoio",
  options: {
    maxPoolSize: 10,
    serverSelectionTimeoutMS: 5000,
    socketTimeoutMS: 45000,
  }
};



// Selecionar configura√ß√£o baseada no ambiente
const config = defaultConfig
let client: MongoClient;
let db: Db;

const connectToMongoDB = async (): Promise<void> => {
  try {
    client = new MongoClient(config.url, config.options);
    await client.connect();
    db = client.db(config.dbName);
    
    // Testar conex√£o
    await db.command({ ping: 1 });
    console.log("‚úÖ Conex√£o com o MongoDB estabelecida com sucesso.");
    console.log(`üìä Database: ${config.dbName}`);
    console.log(`üîó URL: ${config.url}`);
  } catch (err) {
    console.error("‚ùå Erro ao conectar ao MongoDB:", err);
    throw err;
  }
};

const getDb = (): Db => {
  if (!db) {
    throw new Error("Database n√£o est√° conectado. Chame connectToMongoDB primeiro.");
  }
  return db;
};

const getClient = (): MongoClient => {
  if (!client) {
    throw new Error("Cliente MongoDB n√£o est√° conectado. Chame connectToMongoDB primeiro.");
  }
  return client;
};

const closeConnection = async (): Promise<void> => {
  if (client) {
    await client.close();
    console.log("üîå Conex√£o com o MongoDB fechada.");
  }
};

// Fun√ß√£o para criar √≠ndices nas cole√ß√µes
const createIndexes = async (): Promise<void> => {
  try {
    const db = getDb();
    
    // Fun√ß√£o auxiliar para criar √≠ndice apenas se n√£o existir
    const createIndexIfNotExists = async (collection: string, indexSpec: any, options?: any) => {
      try {
        await db.collection(collection).createIndex(indexSpec, options);
        return true;
      } catch (error: any) {
        // Se o √≠ndice j√° existe, n√£o √© um erro
        if (error.code === 85 || error.message?.includes('already exists')) {
          return false;
        }
        throw error;
      }
    };

    console.log("üîÑ Verificando e criando √≠ndices necess√°rios...");
    
    // √çndices para usu√°rios (cole√ß√£o principal)
    await createIndexIfNotExists('usuarios', { cpf: 1 }, { unique: true });
    await createIndexIfNotExists('usuarios', { login: 1 }, { unique: true });
    await createIndexIfNotExists('usuarios', { email: 1 });
    await createIndexIfNotExists('usuarios', { tipo_usuario: 1 });
    
    // √çndices para dados embutidos de v√≠timas
    await createIndexIfNotExists('usuarios', { "dados_vitima.escolaridade": 1 });
    await createIndexIfNotExists('usuarios', { "dados_vitima.etnia": 1 });
    await createIndexIfNotExists('usuarios', { "dados_vitima.idade": 1 });
    await createIndexIfNotExists('usuarios', { "dados_vitima.endereco.cidade": 1 });
    await createIndexIfNotExists('usuarios', { "dados_vitima.endereco.estado": 1 });
    
    // √çndices para dados embutidos de profissionais
    await createIndexIfNotExists('usuarios', { "dados_profissional.especialidade": 1 });
    await createIndexIfNotExists('usuarios', { "dados_profissional.cargo": 1 });
    await createIndexIfNotExists('usuarios', { "dados_profissional.numero_registro": 1 }, { unique: true });
    
    // √çndices para agendamentos
    await createIndexIfNotExists('agendamentos', { data: 1, hora: 1 });
    await createIndexIfNotExists('agendamentos', { profissional_id: 1 });
    await createIndexIfNotExists('agendamentos', { paciente_id: 1 });
    await createIndexIfNotExists('agendamentos', { status: 1 });
    await createIndexIfNotExists('agendamentos', { "profissional_id": 1, "data": 1, "hora": 1 });
    await createIndexIfNotExists('agendamentos', { "paciente_id": 1, "data": 1, "hora": 1 });
    
    console.log("‚úÖ √çndices verificados e criados conforme necess√°rio.");
  } catch (error) {
    console.error("‚ùå Erro ao verificar/criar √≠ndices:", error);
    // N√£o falhar a aplica√ß√£o se houver erro nos √≠ndices
    console.log("‚ö†Ô∏è Continuando sem alguns √≠ndices...");
  }
};

export { 
  config, 
  connectToMongoDB, 
  getDb, 
  getClient, 
  closeConnection, 
  createIndexes 
};
